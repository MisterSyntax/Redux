1. Plan your app by determining Actions, and understanding state
2. create a src folder
    -Place actions in an object in constants.js
    -Place state in initialState.json
3. Nav to where you want to build your project
    - "npm init" //creates your package.json file
4. Install babel and babel command line tool
    npm i babel-cli --save-dev
5. Install latest features of ES6 spec for Babel
    npm i babel-preset-latest --save-dev
6. Install latest experiment features babel-preset-stage-0
    npm i babel-preset-stage-0 --save-dev
7. @ root create .babelrc
    -in here you tell babel what presets to use e.g.
    {"presets" : ["latest", "stage-0"]    }
8. Create your index.js in src
9. In package.json create "start" and "dev" in scripts
    start": "./node_modules/.bin/babel-node ./src/index.js"
    //can omite index.js since its main file in config
10: Test config by running 
    npm start

====
set up constants
1. create a file in /src/ called constants.js
2. this file exports an object with all of the actions that modify state with values of themselves e.g.
    const constants = {
        ADD_DAY: "ADD_DAY",
        REMOVE_DAY: "REMOVE_DAY"
    };

    export default constants;

====
set up reducers
1. create a store folder within /src/ and a reducers.js file in /src/store
2. import constants into reducers.js

==
1. install redux
    -npm i redux --save
2. in reducers.js 
    import { combineReducers } from 'redux'
3. combine reducers to have same form as initialState.json and export them as default
    e.g. 
        {
            reducer1,
            reducer2,
            reducer3,
            nestedReducer: {
                nestedReducer1,
                nestedReducer2
            }
        }
    is
    export default combineReducers({
        reducer1,
        reducer2,
        reducer3,
        nestedReducer: combineReducers({
            nestedReducer1,
            nestedReducer2
        })
    })

====
use combined reducers in your index.js or wherever to mod state
    import C from "./constants";
    import appReducer from "./store/reducers";
    import initialState from "./initialState.json";

    let state = initialState;

    state = appReducer(state, {
        type: "ACTION_NAmE",
        payload: payload_value
    });

====
Create a static build with webpack
1. nav to your directory
2. install webpack
    npm i webpack --save-dev
3. install webpack-dev-server
    npm i webpack-dev-server --save-dev
4. set up loaders for transpiling
    npm i babel-loader --save-dev
    npm i json-loader --save-dev
    npm i babel-core --save-dev
5. create webpack.config.js at '/' 
    contains 
        entry - where to start
        output - where to put file
        devServer - tells webpack devServer how to operate
        module - how to transpile code

        const webpack = require("webpack");
        const path = require("path");

        module.exports = {
            context: path.resolve(__dirname, "./src"),
            entry: "./index.js",
            output: {
                path: path.resolve(__dirname, "./dist/assets"),
                filename: "bundle.js",
                publicPath: "/assets"
            },
            devServer: {
                inline: true,
                contentBase: path.join(__dirname, "./dist"),
                port: 3000
            },
            module: {
                loaders: [
                    {
                        test: /\.js$/,
                        exclude: /(node_modules)/,
                        loader: "babel-loader",
                        options: {
                            presets: ["latest", "stage-0"]
                        }
                    },
                    {
                        test: /.json$/,
                        exclude: /(node_modules)/,
                        loader: "json-loader"
                    }
                ]
            }
        };


6. update package.json to point to webpack
    "start": "./node_modules/.bin/webpack-dev-server"

7. Create a Store
    import appReducer from "./store/reducers";
    ...
    import { createStore } from "redux"
    const store= createStore(appReducer);
    //by usng the appReducer, our initial state will be created by appReducer calls
    